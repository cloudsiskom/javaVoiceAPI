/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import com.example.ApiHelper;
import com.example.Server;
import com.example.exceptions.ApiException;
import com.example.exceptions.CreateIntentException;
import com.example.http.request.HttpMethod;
import com.example.models.AIName;
import com.example.models.CreateIntentRequest;
import com.example.models.IntentDelete;
import com.example.models.IntentDeleteRequest;
import com.example.models.IntentEdit;
import com.example.models.IntentEditRequest;
import com.example.models.IntentList;
import com.example.models.IntentQuery;
import com.example.models.IntentQueryRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ConversationAIController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ConversationAIController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void createIntent(
            final CreateIntentRequest body) throws ApiException, IOException {
        prepareCreateIntentRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> createIntentAsync(
            final CreateIntentRequest body) {
        try { 
            return prepareCreateIntentRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createIntent.
     */
    private ApiCall<Void, ApiException> prepareCreateIntentRequest(
            final CreateIntentRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/ai/intent/create")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new CreateIntentException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the IntentQuery response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IntentQuery intentQuery(
            final IntentQueryRequest body) throws ApiException, IOException {
        return prepareIntentQueryRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the IntentQuery response from the API call
     */
    public CompletableFuture<IntentQuery> intentQueryAsync(
            final IntentQueryRequest body) {
        try { 
            return prepareIntentQueryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for intentQuery.
     */
    private ApiCall<IntentQuery, ApiException> prepareIntentQueryRequest(
            final IntentQueryRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<IntentQuery, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/ai/intent/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IntentQuery.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the IntentList response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IntentList intentList() throws ApiException, IOException {
        return prepareIntentListRequest().execute();
    }

    /**
     * @return    Returns the IntentList response from the API call
     */
    public CompletableFuture<IntentList> intentListAsync() {
        try { 
            return prepareIntentListRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for intentList.
     */
    private ApiCall<IntentList, ApiException> prepareIntentListRequest() throws IOException {
        return new ApiCall.Builder<IntentList, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/ai/intent/list")
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IntentList.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the IntentEdit response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IntentEdit intentEdit(
            final IntentEditRequest body) throws ApiException, IOException {
        return prepareIntentEditRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the IntentEdit response from the API call
     */
    public CompletableFuture<IntentEdit> intentEditAsync(
            final IntentEditRequest body) {
        try { 
            return prepareIntentEditRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for intentEdit.
     */
    private ApiCall<IntentEdit, ApiException> prepareIntentEditRequest(
            final IntentEditRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<IntentEdit, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/ai/intent/edit")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IntentEdit.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the AIName response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AIName aIName() throws ApiException, IOException {
        return prepareAINameRequest().execute();
    }

    /**
     * @return    Returns the AIName response from the API call
     */
    public CompletableFuture<AIName> aINameAsync() {
        try { 
            return prepareAINameRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for aIName.
     */
    private ApiCall<AIName, ApiException> prepareAINameRequest() throws IOException {
        return new ApiCall.Builder<AIName, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/ai/getname")
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AIName.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the IntentDelete response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IntentDelete intentDelete(
            final IntentDeleteRequest body) throws ApiException, IOException {
        return prepareIntentDeleteRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the IntentDelete response from the API call
     */
    public CompletableFuture<IntentDelete> intentDeleteAsync(
            final IntentDeleteRequest body) {
        try { 
            return prepareIntentDeleteRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for intentDelete.
     */
    private ApiCall<IntentDelete, ApiException> prepareIntentDeleteRequest(
            final IntentDeleteRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<IntentDelete, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/ai/intent/delete")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IntentDelete.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}