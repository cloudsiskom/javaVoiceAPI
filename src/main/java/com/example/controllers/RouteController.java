/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import com.example.ApiHelper;
import com.example.Server;
import com.example.exceptions.ApiException;
import com.example.http.request.HttpMethod;
import com.example.models.RouteIncoming;
import com.example.models.RouteIncomingRequest;
import com.example.models.RouteList;
import com.example.models.RouteOutgoing;
import com.example.models.RouteOutgoingRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class RouteController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public RouteController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the RouteIncoming response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RouteIncoming routeIncoming(
            final RouteIncomingRequest body) throws ApiException, IOException {
        return prepareRouteIncomingRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the RouteIncoming response from the API call
     */
    public CompletableFuture<RouteIncoming> routeIncomingAsync(
            final RouteIncomingRequest body) {
        try { 
            return prepareRouteIncomingRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for routeIncoming.
     */
    private ApiCall<RouteIncoming, ApiException> prepareRouteIncomingRequest(
            final RouteIncomingRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<RouteIncoming, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/route/incoming")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, RouteIncoming.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the RouteOutgoing response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RouteOutgoing routeOutgoing(
            final RouteOutgoingRequest body) throws ApiException, IOException {
        return prepareRouteOutgoingRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the RouteOutgoing response from the API call
     */
    public CompletableFuture<RouteOutgoing> routeOutgoingAsync(
            final RouteOutgoingRequest body) {
        try { 
            return prepareRouteOutgoingRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for routeOutgoing.
     */
    private ApiCall<RouteOutgoing, ApiException> prepareRouteOutgoingRequest(
            final RouteOutgoingRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<RouteOutgoing, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/route/outgoing")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, RouteOutgoing.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the RouteList response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RouteList routeList() throws ApiException, IOException {
        return prepareRouteListRequest().execute();
    }

    /**
     * @return    Returns the RouteList response from the API call
     */
    public CompletableFuture<RouteList> routeListAsync() {
        try { 
            return prepareRouteListRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for routeList.
     */
    private ApiCall<RouteList, ApiException> prepareRouteListRequest() throws IOException {
        return new ApiCall.Builder<RouteList, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/route/list")
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, RouteList.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}