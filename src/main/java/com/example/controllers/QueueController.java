/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import com.example.ApiHelper;
import com.example.Server;
import com.example.exceptions.ApiException;
import com.example.exceptions.QueueAddAgentException;
import com.example.exceptions.QueueDeleteException;
import com.example.exceptions.QueueRemoveAgentException;
import com.example.http.request.HttpMethod;
import com.example.models.QueueAddAgentRequest;
import com.example.models.QueueDeleteRequest;
import com.example.models.QueueList;
import com.example.models.QueueNew;
import com.example.models.QueueNewRequest;
import com.example.models.QueueRemoveAgentRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class QueueController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public QueueController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * RING_STRATEGY : \* ringall: ring all available channels until one answers (default) \*
     * roundrobin: take turns ringing each available interface (deprecated in 1.4, use rrmemory) \*
     * leastrecent: ring interface which was least recently called by this queue \* fewestcalls:
     * ring the one with fewest completed calls from this queue \* random: ring random interface \*
     * rrmemory: round robin with memory, remember where we left off last ring pass.
     * @param  body  Required parameter: Example:
     * @return    Returns the QueueNew response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public QueueNew queueNew(
            final QueueNewRequest body) throws ApiException, IOException {
        return prepareQueueNewRequest(body).execute();
    }

    /**
     * RING_STRATEGY : \* ringall: ring all available channels until one answers (default) \*
     * roundrobin: take turns ringing each available interface (deprecated in 1.4, use rrmemory) \*
     * leastrecent: ring interface which was least recently called by this queue \* fewestcalls:
     * ring the one with fewest completed calls from this queue \* random: ring random interface \*
     * rrmemory: round robin with memory, remember where we left off last ring pass.
     * @param  body  Required parameter: Example:
     * @return    Returns the QueueNew response from the API call
     */
    public CompletableFuture<QueueNew> queueNewAsync(
            final QueueNewRequest body) {
        try { 
            return prepareQueueNewRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for queueNew.
     */
    private ApiCall<QueueNew, ApiException> prepareQueueNewRequest(
            final QueueNewRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<QueueNew, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/queue/new")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, QueueNew.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void queueDelete(
            final QueueDeleteRequest body) throws ApiException, IOException {
        prepareQueueDeleteRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> queueDeleteAsync(
            final QueueDeleteRequest body) {
        try { 
            return prepareQueueDeleteRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for queueDelete.
     */
    private ApiCall<Void, ApiException> prepareQueueDeleteRequest(
            final QueueDeleteRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/queue/delete")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found",
                                (reason, context) -> new QueueDeleteException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the QueueList response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public QueueList queueList() throws ApiException, IOException {
        return prepareQueueListRequest().execute();
    }

    /**
     * @return    Returns the QueueList response from the API call
     */
    public CompletableFuture<QueueList> queueListAsync() {
        try { 
            return prepareQueueListRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for queueList.
     */
    private ApiCall<QueueList, ApiException> prepareQueueListRequest() throws IOException {
        return new ApiCall.Builder<QueueList, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/queue/list")
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, QueueList.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **AGENT_TYPE** : \* SIP (Agent is SIP device / Extension) \* local (Agent is AGENT_CODE).
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void queueAddAgent(
            final QueueAddAgentRequest body) throws ApiException, IOException {
        prepareQueueAddAgentRequest(body).execute();
    }

    /**
     * **AGENT_TYPE** : \* SIP (Agent is SIP device / Extension) \* local (Agent is AGENT_CODE).
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> queueAddAgentAsync(
            final QueueAddAgentRequest body) {
        try { 
            return prepareQueueAddAgentRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for queueAddAgent.
     */
    private ApiCall<Void, ApiException> prepareQueueAddAgentRequest(
            final QueueAddAgentRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/queue/agent")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found",
                                (reason, context) -> new QueueAddAgentException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **AGENT_TYPE** : \* SIP (Agent is SIP device / Extension) \* local (Agent is AGENT_CODE).
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void queueRemoveAgent(
            final QueueRemoveAgentRequest body) throws ApiException, IOException {
        prepareQueueRemoveAgentRequest(body).execute();
    }

    /**
     * **AGENT_TYPE** : \* SIP (Agent is SIP device / Extension) \* local (Agent is AGENT_CODE).
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> queueRemoveAgentAsync(
            final QueueRemoveAgentRequest body) {
        try { 
            return prepareQueueRemoveAgentRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for queueRemoveAgent.
     */
    private ApiCall<Void, ApiException> prepareQueueRemoveAgentRequest(
            final QueueRemoveAgentRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/queue/agent/delete")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.create("Not Found",
                                (reason, context) -> new QueueRemoveAgentException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}