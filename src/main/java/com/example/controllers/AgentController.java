/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import com.example.ApiHelper;
import com.example.Server;
import com.example.exceptions.AgentLoginException;
import com.example.exceptions.ApiException;
import com.example.http.request.HttpMethod;
import com.example.models.AgentDelete;
import com.example.models.AgentDeleteRequest;
import com.example.models.AgentList;
import com.example.models.AgentLoginRequest;
import com.example.models.AgentNew;
import com.example.models.AgentNewRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AgentController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public AgentController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * ACTION : \* new (New agent) \* edit (Edit existing Agent).
     * @param  body  Required parameter: Example:
     * @return    Returns the AgentNew response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AgentNew agentNew(
            final AgentNewRequest body) throws ApiException, IOException {
        return prepareAgentNewRequest(body).execute();
    }

    /**
     * ACTION : \* new (New agent) \* edit (Edit existing Agent).
     * @param  body  Required parameter: Example:
     * @return    Returns the AgentNew response from the API call
     */
    public CompletableFuture<AgentNew> agentNewAsync(
            final AgentNewRequest body) {
        try { 
            return prepareAgentNewRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for agentNew.
     */
    private ApiCall<AgentNew, ApiException> prepareAgentNewRequest(
            final AgentNewRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<AgentNew, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/agent/new")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AgentNew.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the AgentDelete response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AgentDelete agentDelete(
            final AgentDeleteRequest body) throws ApiException, IOException {
        return prepareAgentDeleteRequest(body).execute();
    }

    /**
     * @param  body  Required parameter: Example:
     * @return    Returns the AgentDelete response from the API call
     */
    public CompletableFuture<AgentDelete> agentDeleteAsync(
            final AgentDeleteRequest body) {
        try { 
            return prepareAgentDeleteRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for agentDelete.
     */
    private ApiCall<AgentDelete, ApiException> prepareAgentDeleteRequest(
            final AgentDeleteRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<AgentDelete, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/agent/delete")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AgentDelete.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @return    Returns the AgentList response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AgentList agentList() throws ApiException, IOException {
        return prepareAgentListRequest().execute();
    }

    /**
     * @return    Returns the AgentList response from the API call
     */
    public CompletableFuture<AgentList> agentListAsync() {
        try { 
            return prepareAgentListRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for agentList.
     */
    private ApiCall<AgentList, ApiException> prepareAgentListRequest() throws IOException {
        return new ApiCall.Builder<AgentList, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/agent/list")
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AgentList.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * **ACTION** : \* login (Login agent to EXTENSION) \* logoff (logoff agent from EXTENSION).
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void agentLogin(
            final AgentLoginRequest body) throws ApiException, IOException {
        prepareAgentLoginRequest(body).execute();
    }

    /**
     * **ACTION** : \* login (Login agent to EXTENSION) \* logoff (logoff agent from EXTENSION).
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> agentLoginAsync(
            final AgentLoginRequest body) {
        try { 
            return prepareAgentLoginRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for agentLogin.
     */
    private ApiCall<Void, ApiException> prepareAgentLoginRequest(
            final AgentLoginRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER_1.value())
                        .path("/agent/action")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.create("Forbidden",
                                (reason, context) -> new AgentLoginException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}