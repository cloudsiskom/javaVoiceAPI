/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.example.ApiHelper;
import com.example.SiskomVoiceAPIClient;
import com.example.exceptions.ApiException;
import com.example.models.QueueList;
import com.example.models.QueueNew;
import com.example.models.QueueNewRequest;
import io.apimatic.core.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class QueueControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static SiskomVoiceAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static QueueController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getQueueController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * RING_STRATEGY : \* ringall: ring all available channels until one answers (default) \*
     * roundrobin: take turns ringing each available interface (deprecated in 1.4, use rrmemory) \*
     * leastrecent: ring interface which was least recently called by this queue \* fewestcalls:
     * ring the one with fewest completed calls from this queue \* random: ring random interface \*
     * rrmemory: round robin with memory, remember where we left off last ring pass.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testQueueNew() throws Exception {
        // Parameters for the API call
        QueueNewRequest body = ApiHelper.deserialize(
                "{\r\n  \"queue_name\": \"[QUEUE_NAME]\",\r\n  \"ring_strategy\": \"[RING_STRATEGY]"
                + "\"\r\n}",
                QueueNewRequest.class);

        // Set callback and perform API call
        QueueNew result = null;
        try {
            result = controller.queueNew(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"data\": {\r\n    \"queue_name\": \"queue-151-3"
                + "\",\r\n    \"ring_strategy\": \"ringall\"\r\n  }\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Test case for Queue list.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testQueueList() throws Exception {

        // Set callback and perform API call
        QueueList result = null;
        try {
            result = controller.queueList();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"data\": [\r\n    {\r\n      \"queue_id\": 35,\r"
                + "\n      \"queue_name\": \"96789665\",\r\n      \"musiclass\": \"default\",\r\n  "
                + "    \"strategy\": \"ringall\",\r\n      \"members\": [\r\n        {\r\n         "
                + " \"member\": \"SIP/968976567\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n   "
                + "   \"queue_id\": 36,\r\n      \"queue_name\": \"96queue-151-3\",\r\n      \"musi"
                + "class\": \"default\",\r\n      \"strategy\": \"ringall\",\r\n      \"members\": "
                + "[]\r\n    }\r\n  ]\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
