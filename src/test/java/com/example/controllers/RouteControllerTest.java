/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.example.ApiHelper;
import com.example.SiskomVoiceAPIClient;
import com.example.exceptions.ApiException;
import com.example.models.RouteIncoming;
import com.example.models.RouteIncomingRequest;
import com.example.models.RouteList;
import com.example.models.RouteOutgoing;
import com.example.models.RouteOutgoingRequest;
import io.apimatic.core.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class RouteControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static SiskomVoiceAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static RouteController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getRouteController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for Route incoming.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRouteIncoming() throws Exception {
        // Parameters for the API call
        RouteIncomingRequest body = ApiHelper.deserialize(
                "{\r\n  \"did\": \"[DID]\",\r\n  \"destination\": \"[DESTINATION]\",\r\n  \"destina"
                + "tion_detail\": \"[DESTINATION_DETAIL]\"\r\n}",
                RouteIncomingRequest.class);

        // Set callback and perform API call
        RouteIncoming result = null;
        try {
            result = controller.routeIncoming(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"reponse\": true,\r\n  \"did\": \"6285757920463\",\r\n  \"destination\": "
                + "\"TRUNK\",\r\n  \"destination_detail\": \"CVAI\"\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Test case for Route outgoing.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRouteOutgoing() throws Exception {
        // Parameters for the API call
        RouteOutgoingRequest body = ApiHelper.deserialize(
                "{\r\n  \"route_name\": \"[ROUTE_NAME]\",\r\n  \"device\": \"[DEVICE]\",\r\n  \"rou"
                + "te_to\": \"[ROUTE_DESTINATION]\",\r\n  \"route_detail\": \"[DESTINATION_DETAIL]"
                + "\",\r\n  \"route_prefix\": \"[PREFIX]\"\r\n}",
                RouteOutgoingRequest.class);

        // Set callback and perform API call
        RouteOutgoing result = null;
        try {
            result = controller.routeOutgoing(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"device\": \"8210000000001\",\r\n  \"route_to\": "
                + "\"RANDOM\",\r\n  \"route_detail\": \"RDM1\"\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Test case for Route List.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRouteList() throws Exception {

        // Set callback and perform API call
        RouteList result = null;
        try {
            result = controller.routeList();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"incoming_route\": [\r\n    {\r\n      \"id\": 57"
                + ",\r\n      \"transaction_id\": null,\r\n      \"customer_code\": \"GOJEK\",\r\n "
                + "     \"did\": \"6285757920462\",\r\n      \"destination\": \"DTMFTEST\",\r\n    "
                + "  \"destination_detail\": null,\r\n      \"create_date\": \"2022-08-23T22:57:32."
                + "000Z\",\r\n      \"isActive\": 1\r\n    },\r\n    {\r\n      \"id\": 65,\r\n    "
                + "  \"transaction_id\": null,\r\n      \"customer_code\": \"GOJEK\",\r\n      \"di"
                + "d\": \"6285592055238\",\r\n      \"destination\": \"CVAI\",\r\n      \"destinati"
                + "on_detail\": \"BANK_BKKN\",\r\n      \"create_date\": \"2022-09-01T17:00:23.000Z"
                + "\",\r\n      \"isActive\": 1\r\n    },\r\n    {\r\n      \"id\": 69,\r\n      "
                + "\"transaction_id\": null,\r\n      \"customer_code\": \"GOJEK\",\r\n      \"did"
                + "\": \"02150995134\",\r\n      \"destination\": \"IVR\",\r\n      \"destination_d"
                + "etail\": \"TOKO_BUAH\",\r\n      \"create_date\": \"2022-09-14T02:37:27.000Z\","
                + "\r\n      \"isActive\": 1\r\n    },\r\n    {\r\n      \"id\": 72,\r\n      \"tra"
                + "nsaction_id\": null,\r\n      \"customer_code\": \"GOJEK\",\r\n      \"did\": "
                + "\"6285757920463\",\r\n      \"destination\": \"TRUNK\",\r\n      \"destination_d"
                + "etail\": \"CVAI\",\r\n      \"create_date\": \"2022-09-16T03:45:38.000Z\",\r\n  "
                + "    \"isActive\": 1\r\n    }\r\n  ],\r\n  \"outgoing_route\": [\r\n    {\r\n    "
                + "  \"id\": 582,\r\n      \"customer_code\": \"GOJEK\",\r\n      \"extension\": "
                + "\"ALL\",\r\n      \"route_to\": \"PROVIDER\",\r\n      \"route_detail\": \"62855"
                + "92055236\",\r\n      \"tech_prefix\": \"\",\r\n      \"create_date\": \"2022-09-"
                + "14T19:40:24.000Z\",\r\n      \"isActive\": 1\r\n    },\r\n    {\r\n      \"id\":"
                + " 583,\r\n      \"customer_code\": \"GOJEK\",\r\n      \"extension\": \"821000000"
                + "0001\",\r\n      \"route_to\": \"RANDOM\",\r\n      \"route_detail\": \"RDM1\","
                + "\r\n      \"tech_prefix\": \"198767\",\r\n      \"create_date\": \"2022-09-16T03"
                + ":45:44.000Z\",\r\n      \"isActive\": 1\r\n    }\r\n  ]\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
