/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.example.ApiHelper;
import com.example.SiskomVoiceAPIClient;
import com.example.exceptions.ApiException;
import com.example.models.DevcieList;
import com.example.models.Device;
import com.example.models.DeviceRequest;
import io.apimatic.core.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class DeviceControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static SiskomVoiceAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static DeviceController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getDeviceController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * DEVICE_TYPE : \* TRUNK (This will be sip trunk with dedicated IP Address) \* EXTEN
     * (Extension).
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testDevice() throws Exception {
        // Parameters for the API call
        DeviceRequest body = ApiHelper.deserialize(
                "{\r\n  \"device_type\": \"[DEVICE_TYPE]\",\r\n  \"device_owner\": \"[DEVICE_OWNER]"
                + "\",\r\n  \"extension\": \"[DEVICE_NAME / EXTENSION]\",\r\n  \"secret\": \"[DEVIC"
                + "E_SECRET]\",\r\n  \"ip_address\": \"[DEVICE_IP_ADDRESS]\"\r\n}",
                DeviceRequest.class);

        // Set callback and perform API call
        Device result = null;
        try {
            result = controller.device(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"data\": {\r\n    \"extension\": \"96142450000001"
                + "3\",\r\n    \"secret\": \"padamunegeri\",\r\n    \"device_owner\": \"kiki\"\r\n "
                + " }\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Test case for Devcie list.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testDevcieList() throws Exception {

        // Set callback and perform API call
        DevcieList result = null;
        try {
            result = controller.devcieList();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"data\": [\r\n    {\r\n      \"extension\": \"968"
                + "976567\",\r\n      \"host\": \"dynamic\",\r\n      \"device_type\": \"EXTEN\",\r"
                + "\n      \"device_owner\": \"sahabat\",\r\n      \"secret\": \"sahabat\",\r\n    "
                + "  \"isOnline\": 0,\r\n      \"device_state\": \"UNAVAILABLE\"\r\n    },\r\n    {"
                + "\r\n      \"extension\": \"961424500000013\",\r\n      \"host\": \"192.168.1.1"
                + "\",\r\n      \"device_type\": \"TRUNK\",\r\n      \"device_owner\": \"kiki\",\r"
                + "\n      \"secret\": \"padamunegeri\",\r\n      \"isOnline\": 0,\r\n      \"devic"
                + "e_state\": null\r\n    }\r\n  ]\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
