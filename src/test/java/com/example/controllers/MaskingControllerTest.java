/*
 * SiskomVoiceAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.example.ApiHelper;
import com.example.SiskomVoiceAPIClient;
import com.example.exceptions.ApiException;
import com.example.models.Delete;
import com.example.models.Deleterequest;
import com.example.models.List;
import com.example.models.Request;
import com.example.models.Requestrequest;
import io.apimatic.core.testing.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class MaskingControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static SiskomVoiceAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static MaskingController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getMaskingController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test case for request.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testRequest() throws Exception {
        // Parameters for the API call
        Requestrequest body = ApiHelper.deserialize(
                "{\r\n  \"caller_id\": \"[CALLER_ID]\"\r\n}",
                Requestrequest.class);

        // Set callback and perform API call
        Request result = null;
        try {
            result = controller.request(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"caller_id\": \"628198788686\",\r\n  \"isActive"
                + "\": 0\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Test case for delete.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testDelete() throws Exception {
        // Parameters for the API call
        Deleterequest body = ApiHelper.deserialize(
                "{\r\n  \"caller_id\": \"[CALLER_ID]\"\r\n}",
                Deleterequest.class);

        // Set callback and perform API call
        Delete result = null;
        try {
            result = controller.delete(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"caller_id\": \"628198788686\",\r\n  \"action\": "
                + "\"delete\"\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Test case for list.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testList() throws Exception {

        // Set callback and perform API call
        List result = null;
        try {
            result = controller.list();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", TestHelper.nullString);
        headers.put("Date", TestHelper.nullString);
        headers.put("Server", TestHelper.nullString);
        headers.put("X-Powered-By", TestHelper.nullString);
        headers.put("Content-Length", TestHelper.nullString);
        headers.put("ETag", TestHelper.nullString);
        headers.put("Keep-Alive", TestHelper.nullString);
        headers.put("Connection", TestHelper.nullString);
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\r\n  \"response\": true,\r\n  \"data\": []\r\n}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
